import retext from 'retext';
import processor from 'retext-keywords';
import nlcstToString from 'nlcst-to-string';
import _ from 'underscore';
import { Promise } from 'es6-promise';

export default class ModelExtension {
  analyzeKeywords() {
    return new Promise((resolve, reject) => {
      return this.runRetext().then(report => {
        resolve(report.keywords.map(keyword => nlcstToString(keyword.matches[0].node)));
      });
    });
  }

  runRetext() {
    return new Promise((resolve, reject) => {
      this.retextProcessor.process(this.document.content, function (err, file) {
        let space = file.namespace('retext');
        if (!err) {
          resolve(space);
        } else {
          reject(err);
        }
      });
    });
  }

  get retextProcessor() {
    return retext().use(processor);
  }
}

module.exports = ModelExtension;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHRlbnNpb25zL21vZGVsX2V4dGVuc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUE7QUFDM0IsT0FBTyxTQUFTLE1BQU0saUJBQWlCLENBQUE7QUFDdkMsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUE7QUFDM0MsT0FBTyxDQUFDLE1BQU0sWUFBWSxDQUFBO0FBQzFCLFNBQVEsT0FBTyxRQUFPLGFBQWEsQ0FBQTs7QUFFbkMsZUFBZSxNQUFNLGNBQWMsQ0FBQztBQUNsQyxpQkFBZSxHQUFFO0FBQ2YsV0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBQyxNQUFNLEtBQUc7QUFDbkMsYUFBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBRztBQUNwQyxlQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtPQUNoRixDQUFDLENBQUE7S0FDSCxDQUFDLENBQUE7R0FDSDs7QUFFRCxXQUFTLEdBQUU7QUFDVCxXQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFDLE1BQU0sS0FBRztBQUNuQyxVQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxVQUFTLEdBQUcsRUFBRSxJQUFJLEVBQUM7QUFDckUsWUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNwQyxZQUFHLENBQUMsR0FBRyxFQUFDO0FBQUUsaUJBQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUFFLE1BQU07QUFBRSxnQkFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQUU7T0FDaEQsQ0FBQyxDQUFBO0tBQ0gsQ0FBQyxDQUFBO0dBQ0g7O0FBRUQsTUFBSSxlQUFlLEdBQUU7QUFDbkIsV0FBTyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7R0FDL0I7Q0FDRjs7QUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQSIsImZpbGUiOiJtb2RlbF9leHRlbnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmV0ZXh0IGZyb20gJ3JldGV4dCdcbmltcG9ydCBwcm9jZXNzb3IgZnJvbSAncmV0ZXh0LWtleXdvcmRzJ1xuaW1wb3J0IG5sY3N0VG9TdHJpbmcgZnJvbSAnbmxjc3QtdG8tc3RyaW5nJ1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSdcbmltcG9ydCB7UHJvbWlzZX0gZnJvbSAnZXM2LXByb21pc2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsRXh0ZW5zaW9uIHtcbiAgYW5hbHl6ZUtleXdvcmRzKCl7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCk9PntcbiAgICAgIHJldHVybiB0aGlzLnJ1blJldGV4dCgpLnRoZW4ocmVwb3J0ID0+e1xuICAgICAgICByZXNvbHZlKHJlcG9ydC5rZXl3b3Jkcy5tYXAoa2V5d29yZCA9PiBubGNzdFRvU3RyaW5nKGtleXdvcmQubWF0Y2hlc1swXS5ub2RlKSkpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBydW5SZXRleHQoKXtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUscmVqZWN0KT0+e1xuICAgICAgdGhpcy5yZXRleHRQcm9jZXNzb3IucHJvY2Vzcyh0aGlzLmRvY3VtZW50LmNvbnRlbnQsIGZ1bmN0aW9uKGVyciwgZmlsZSl7XG4gICAgICAgIGxldCBzcGFjZSA9IGZpbGUubmFtZXNwYWNlKCdyZXRleHQnKVxuICAgICAgICBpZighZXJyKXsgcmVzb2x2ZShzcGFjZSkgfSBlbHNlIHsgcmVqZWN0KGVycikgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZ2V0IHJldGV4dFByb2Nlc3Nvcigpe1xuICAgIHJldHVybiByZXRleHQoKS51c2UocHJvY2Vzc29yKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kZWxFeHRlbnNpb25cbiJdfQ==